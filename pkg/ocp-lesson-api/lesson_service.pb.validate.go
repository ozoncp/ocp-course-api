// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lesson_service.proto

package ocp_lesson_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Lesson with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Lesson) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Lesson with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LessonMultiError, or nil if none found.
func (m *Lesson) ValidateAll() error {
	return m.validate(true)
}

func (m *Lesson) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := LessonValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCourseId() <= 0 {
		err := LessonValidationError{
			field:  "CourseId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetNumber() <= 0 {
		err := LessonValidationError{
			field:  "Number",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := LessonValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LessonMultiError(errors)
	}

	return nil
}

// LessonMultiError is an error wrapping multiple validation errors returned by
// Lesson.ValidateAll() if the designated constraints aren't met.
type LessonMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LessonMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LessonMultiError) AllErrors() []error { return m }

// LessonValidationError is the validation error returned by Lesson.Validate if
// the designated constraints aren't met.
type LessonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LessonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LessonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LessonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LessonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LessonValidationError) ErrorName() string { return "LessonValidationError" }

// Error satisfies the builtin error interface
func (e LessonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLesson.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LessonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LessonValidationError{}

// Validate checks the field values on ListLessonsV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLessonsV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLessonsV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLessonsV1RequestMultiError, or nil if none found.
func (m *ListLessonsV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLessonsV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetLimit(); val <= 0 || val > 1000 {
		err := ListLessonsV1RequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Offset

	if len(errors) > 0 {
		return ListLessonsV1RequestMultiError(errors)
	}

	return nil
}

// ListLessonsV1RequestMultiError is an error wrapping multiple validation
// errors returned by ListLessonsV1Request.ValidateAll() if the designated
// constraints aren't met.
type ListLessonsV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLessonsV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLessonsV1RequestMultiError) AllErrors() []error { return m }

// ListLessonsV1RequestValidationError is the validation error returned by
// ListLessonsV1Request.Validate if the designated constraints aren't met.
type ListLessonsV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLessonsV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLessonsV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLessonsV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLessonsV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLessonsV1RequestValidationError) ErrorName() string {
	return "ListLessonsV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLessonsV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLessonsV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLessonsV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLessonsV1RequestValidationError{}

// Validate checks the field values on ListLessonsV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLessonsV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLessonsV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLessonsV1ResponseMultiError, or nil if none found.
func (m *ListLessonsV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLessonsV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLessons() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLessonsV1ResponseValidationError{
						field:  fmt.Sprintf("Lessons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLessonsV1ResponseValidationError{
						field:  fmt.Sprintf("Lessons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLessonsV1ResponseValidationError{
					field:  fmt.Sprintf("Lessons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListLessonsV1ResponseMultiError(errors)
	}

	return nil
}

// ListLessonsV1ResponseMultiError is an error wrapping multiple validation
// errors returned by ListLessonsV1Response.ValidateAll() if the designated
// constraints aren't met.
type ListLessonsV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLessonsV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLessonsV1ResponseMultiError) AllErrors() []error { return m }

// ListLessonsV1ResponseValidationError is the validation error returned by
// ListLessonsV1Response.Validate if the designated constraints aren't met.
type ListLessonsV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLessonsV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLessonsV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLessonsV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLessonsV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLessonsV1ResponseValidationError) ErrorName() string {
	return "ListLessonsV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLessonsV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLessonsV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLessonsV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLessonsV1ResponseValidationError{}

// Validate checks the field values on DescribeLessonV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeLessonV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeLessonV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeLessonV1RequestMultiError, or nil if none found.
func (m *DescribeLessonV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeLessonV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetLessonId() <= 0 {
		err := DescribeLessonV1RequestValidationError{
			field:  "LessonId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeLessonV1RequestMultiError(errors)
	}

	return nil
}

// DescribeLessonV1RequestMultiError is an error wrapping multiple validation
// errors returned by DescribeLessonV1Request.ValidateAll() if the designated
// constraints aren't met.
type DescribeLessonV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeLessonV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeLessonV1RequestMultiError) AllErrors() []error { return m }

// DescribeLessonV1RequestValidationError is the validation error returned by
// DescribeLessonV1Request.Validate if the designated constraints aren't met.
type DescribeLessonV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeLessonV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeLessonV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeLessonV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeLessonV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeLessonV1RequestValidationError) ErrorName() string {
	return "DescribeLessonV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeLessonV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeLessonV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeLessonV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeLessonV1RequestValidationError{}

// Validate checks the field values on DescribeLessonV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeLessonV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeLessonV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeLessonV1ResponseMultiError, or nil if none found.
func (m *DescribeLessonV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeLessonV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLesson()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeLessonV1ResponseValidationError{
					field:  "Lesson",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeLessonV1ResponseValidationError{
					field:  "Lesson",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLesson()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeLessonV1ResponseValidationError{
				field:  "Lesson",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DescribeLessonV1ResponseMultiError(errors)
	}

	return nil
}

// DescribeLessonV1ResponseMultiError is an error wrapping multiple validation
// errors returned by DescribeLessonV1Response.ValidateAll() if the designated
// constraints aren't met.
type DescribeLessonV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeLessonV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeLessonV1ResponseMultiError) AllErrors() []error { return m }

// DescribeLessonV1ResponseValidationError is the validation error returned by
// DescribeLessonV1Response.Validate if the designated constraints aren't met.
type DescribeLessonV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeLessonV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeLessonV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeLessonV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeLessonV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeLessonV1ResponseValidationError) ErrorName() string {
	return "DescribeLessonV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeLessonV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeLessonV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeLessonV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeLessonV1ResponseValidationError{}

// Validate checks the field values on CreateLessonV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLessonV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLessonV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLessonV1RequestMultiError, or nil if none found.
func (m *CreateLessonV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLessonV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetLesson() == nil {
		err := CreateLessonV1RequestValidationError{
			field:  "Lesson",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetLesson(); a != nil {

	}

	if len(errors) > 0 {
		return CreateLessonV1RequestMultiError(errors)
	}

	return nil
}

// CreateLessonV1RequestMultiError is an error wrapping multiple validation
// errors returned by CreateLessonV1Request.ValidateAll() if the designated
// constraints aren't met.
type CreateLessonV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLessonV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLessonV1RequestMultiError) AllErrors() []error { return m }

// CreateLessonV1RequestValidationError is the validation error returned by
// CreateLessonV1Request.Validate if the designated constraints aren't met.
type CreateLessonV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLessonV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLessonV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLessonV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLessonV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLessonV1RequestValidationError) ErrorName() string {
	return "CreateLessonV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLessonV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLessonV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLessonV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLessonV1RequestValidationError{}

// Validate checks the field values on CreateLessonV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLessonV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLessonV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLessonV1ResponseMultiError, or nil if none found.
func (m *CreateLessonV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLessonV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetLessonId() <= 0 {
		err := CreateLessonV1ResponseValidationError{
			field:  "LessonId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateLessonV1ResponseMultiError(errors)
	}

	return nil
}

// CreateLessonV1ResponseMultiError is an error wrapping multiple validation
// errors returned by CreateLessonV1Response.ValidateAll() if the designated
// constraints aren't met.
type CreateLessonV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLessonV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLessonV1ResponseMultiError) AllErrors() []error { return m }

// CreateLessonV1ResponseValidationError is the validation error returned by
// CreateLessonV1Response.Validate if the designated constraints aren't met.
type CreateLessonV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLessonV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLessonV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLessonV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLessonV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLessonV1ResponseValidationError) ErrorName() string {
	return "CreateLessonV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLessonV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLessonV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLessonV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLessonV1ResponseValidationError{}

// Validate checks the field values on RemoveLessonV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveLessonV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveLessonV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveLessonV1RequestMultiError, or nil if none found.
func (m *RemoveLessonV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveLessonV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetLessonId() <= 0 {
		err := RemoveLessonV1RequestValidationError{
			field:  "LessonId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveLessonV1RequestMultiError(errors)
	}

	return nil
}

// RemoveLessonV1RequestMultiError is an error wrapping multiple validation
// errors returned by RemoveLessonV1Request.ValidateAll() if the designated
// constraints aren't met.
type RemoveLessonV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveLessonV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveLessonV1RequestMultiError) AllErrors() []error { return m }

// RemoveLessonV1RequestValidationError is the validation error returned by
// RemoveLessonV1Request.Validate if the designated constraints aren't met.
type RemoveLessonV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveLessonV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveLessonV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveLessonV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveLessonV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveLessonV1RequestValidationError) ErrorName() string {
	return "RemoveLessonV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveLessonV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveLessonV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveLessonV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveLessonV1RequestValidationError{}

// Validate checks the field values on RemoveLessonV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveLessonV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveLessonV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveLessonV1ResponseMultiError, or nil if none found.
func (m *RemoveLessonV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveLessonV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Found

	if len(errors) > 0 {
		return RemoveLessonV1ResponseMultiError(errors)
	}

	return nil
}

// RemoveLessonV1ResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveLessonV1Response.ValidateAll() if the designated
// constraints aren't met.
type RemoveLessonV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveLessonV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveLessonV1ResponseMultiError) AllErrors() []error { return m }

// RemoveLessonV1ResponseValidationError is the validation error returned by
// RemoveLessonV1Response.Validate if the designated constraints aren't met.
type RemoveLessonV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveLessonV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveLessonV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveLessonV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveLessonV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveLessonV1ResponseValidationError) ErrorName() string {
	return "RemoveLessonV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveLessonV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveLessonV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveLessonV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveLessonV1ResponseValidationError{}

// Validate checks the field values on UpdateLessonV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLessonV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLessonV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLessonV1RequestMultiError, or nil if none found.
func (m *UpdateLessonV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLessonV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetLesson() == nil {
		err := UpdateLessonV1RequestValidationError{
			field:  "Lesson",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetLesson(); a != nil {

	}

	if len(errors) > 0 {
		return UpdateLessonV1RequestMultiError(errors)
	}

	return nil
}

// UpdateLessonV1RequestMultiError is an error wrapping multiple validation
// errors returned by UpdateLessonV1Request.ValidateAll() if the designated
// constraints aren't met.
type UpdateLessonV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLessonV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLessonV1RequestMultiError) AllErrors() []error { return m }

// UpdateLessonV1RequestValidationError is the validation error returned by
// UpdateLessonV1Request.Validate if the designated constraints aren't met.
type UpdateLessonV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLessonV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLessonV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLessonV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLessonV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLessonV1RequestValidationError) ErrorName() string {
	return "UpdateLessonV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLessonV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLessonV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLessonV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLessonV1RequestValidationError{}

// Validate checks the field values on UpdateLessonV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLessonV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLessonV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLessonV1ResponseMultiError, or nil if none found.
func (m *UpdateLessonV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLessonV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Found

	if len(errors) > 0 {
		return UpdateLessonV1ResponseMultiError(errors)
	}

	return nil
}

// UpdateLessonV1ResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateLessonV1Response.ValidateAll() if the designated
// constraints aren't met.
type UpdateLessonV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLessonV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLessonV1ResponseMultiError) AllErrors() []error { return m }

// UpdateLessonV1ResponseValidationError is the validation error returned by
// UpdateLessonV1Response.Validate if the designated constraints aren't met.
type UpdateLessonV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLessonV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLessonV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLessonV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLessonV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLessonV1ResponseValidationError) ErrorName() string {
	return "UpdateLessonV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLessonV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLessonV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLessonV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLessonV1ResponseValidationError{}

// Validate checks the field values on MultiCreateLessonV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MultiCreateLessonV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultiCreateLessonV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MultiCreateLessonV1RequestMultiError, or nil if none found.
func (m *MultiCreateLessonV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *MultiCreateLessonV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetLessons()) < 1 {
		err := MultiCreateLessonV1RequestValidationError{
			field:  "Lessons",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetLessons() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MultiCreateLessonV1RequestValidationError{
						field:  fmt.Sprintf("Lessons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MultiCreateLessonV1RequestValidationError{
						field:  fmt.Sprintf("Lessons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateLessonV1RequestValidationError{
					field:  fmt.Sprintf("Lessons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MultiCreateLessonV1RequestMultiError(errors)
	}

	return nil
}

// MultiCreateLessonV1RequestMultiError is an error wrapping multiple
// validation errors returned by MultiCreateLessonV1Request.ValidateAll() if
// the designated constraints aren't met.
type MultiCreateLessonV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultiCreateLessonV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultiCreateLessonV1RequestMultiError) AllErrors() []error { return m }

// MultiCreateLessonV1RequestValidationError is the validation error returned
// by MultiCreateLessonV1Request.Validate if the designated constraints aren't met.
type MultiCreateLessonV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateLessonV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateLessonV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateLessonV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateLessonV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateLessonV1RequestValidationError) ErrorName() string {
	return "MultiCreateLessonV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateLessonV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateLessonV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateLessonV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateLessonV1RequestValidationError{}

// Validate checks the field values on MultiCreateLessonV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MultiCreateLessonV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultiCreateLessonV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MultiCreateLessonV1ResponseMultiError, or nil if none found.
func (m *MultiCreateLessonV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *MultiCreateLessonV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNotSaved() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MultiCreateLessonV1ResponseValidationError{
						field:  fmt.Sprintf("NotSaved[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MultiCreateLessonV1ResponseValidationError{
						field:  fmt.Sprintf("NotSaved[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateLessonV1ResponseValidationError{
					field:  fmt.Sprintf("NotSaved[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Error

	if len(errors) > 0 {
		return MultiCreateLessonV1ResponseMultiError(errors)
	}

	return nil
}

// MultiCreateLessonV1ResponseMultiError is an error wrapping multiple
// validation errors returned by MultiCreateLessonV1Response.ValidateAll() if
// the designated constraints aren't met.
type MultiCreateLessonV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultiCreateLessonV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultiCreateLessonV1ResponseMultiError) AllErrors() []error { return m }

// MultiCreateLessonV1ResponseValidationError is the validation error returned
// by MultiCreateLessonV1Response.Validate if the designated constraints
// aren't met.
type MultiCreateLessonV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateLessonV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateLessonV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateLessonV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateLessonV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateLessonV1ResponseValidationError) ErrorName() string {
	return "MultiCreateLessonV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateLessonV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateLessonV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateLessonV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateLessonV1ResponseValidationError{}
