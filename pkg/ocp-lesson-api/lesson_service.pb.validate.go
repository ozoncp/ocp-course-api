// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lesson_service.proto

package ocp_lesson_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Lesson with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Lesson) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return LessonValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	if m.GetCourseId() <= 0 {
		return LessonValidationError{
			field:  "CourseId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetNumber() <= 0 {
		return LessonValidationError{
			field:  "Number",
			reason: "value must be greater than 0",
		}
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return LessonValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// LessonValidationError is the validation error returned by Lesson.Validate if
// the designated constraints aren't met.
type LessonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LessonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LessonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LessonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LessonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LessonValidationError) ErrorName() string { return "LessonValidationError" }

// Error satisfies the builtin error interface
func (e LessonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLesson.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LessonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LessonValidationError{}

// Validate checks the field values on ListLessonsV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListLessonsV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetLimit(); val <= 0 || val > 1000 {
		return ListLessonsV1RequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 1000]",
		}
	}

	// no validation rules for Offset

	// no validation rules for CourseId

	return nil
}

// ListLessonsV1RequestValidationError is the validation error returned by
// ListLessonsV1Request.Validate if the designated constraints aren't met.
type ListLessonsV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLessonsV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLessonsV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLessonsV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLessonsV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLessonsV1RequestValidationError) ErrorName() string {
	return "ListLessonsV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLessonsV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLessonsV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLessonsV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLessonsV1RequestValidationError{}

// Validate checks the field values on ListLessonsV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListLessonsV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetLessons() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLessonsV1ResponseValidationError{
					field:  fmt.Sprintf("Lessons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListLessonsV1ResponseValidationError is the validation error returned by
// ListLessonsV1Response.Validate if the designated constraints aren't met.
type ListLessonsV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLessonsV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLessonsV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLessonsV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLessonsV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLessonsV1ResponseValidationError) ErrorName() string {
	return "ListLessonsV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLessonsV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLessonsV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLessonsV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLessonsV1ResponseValidationError{}

// Validate checks the field values on DescribeLessonV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeLessonV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetLessonId() <= 0 {
		return DescribeLessonV1RequestValidationError{
			field:  "LessonId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeLessonV1RequestValidationError is the validation error returned by
// DescribeLessonV1Request.Validate if the designated constraints aren't met.
type DescribeLessonV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeLessonV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeLessonV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeLessonV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeLessonV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeLessonV1RequestValidationError) ErrorName() string {
	return "DescribeLessonV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeLessonV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeLessonV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeLessonV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeLessonV1RequestValidationError{}

// Validate checks the field values on DescribeLessonV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeLessonV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLesson()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeLessonV1ResponseValidationError{
				field:  "Lesson",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeLessonV1ResponseValidationError is the validation error returned by
// DescribeLessonV1Response.Validate if the designated constraints aren't met.
type DescribeLessonV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeLessonV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeLessonV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeLessonV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeLessonV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeLessonV1ResponseValidationError) ErrorName() string {
	return "DescribeLessonV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeLessonV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeLessonV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeLessonV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeLessonV1ResponseValidationError{}

// Validate checks the field values on CreateLessonV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateLessonV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetLesson() == nil {
		return CreateLessonV1RequestValidationError{
			field:  "Lesson",
			reason: "value is required",
		}
	}

	if a := m.GetLesson(); a != nil {

	}

	return nil
}

// CreateLessonV1RequestValidationError is the validation error returned by
// CreateLessonV1Request.Validate if the designated constraints aren't met.
type CreateLessonV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLessonV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLessonV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLessonV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLessonV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLessonV1RequestValidationError) ErrorName() string {
	return "CreateLessonV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLessonV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLessonV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLessonV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLessonV1RequestValidationError{}

// Validate checks the field values on CreateLessonV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateLessonV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetLessonId() <= 0 {
		return CreateLessonV1ResponseValidationError{
			field:  "LessonId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// CreateLessonV1ResponseValidationError is the validation error returned by
// CreateLessonV1Response.Validate if the designated constraints aren't met.
type CreateLessonV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLessonV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLessonV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLessonV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLessonV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLessonV1ResponseValidationError) ErrorName() string {
	return "CreateLessonV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLessonV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLessonV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLessonV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLessonV1ResponseValidationError{}

// Validate checks the field values on RemoveLessonV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveLessonV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetLessonId() <= 0 {
		return RemoveLessonV1RequestValidationError{
			field:  "LessonId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveLessonV1RequestValidationError is the validation error returned by
// RemoveLessonV1Request.Validate if the designated constraints aren't met.
type RemoveLessonV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveLessonV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveLessonV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveLessonV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveLessonV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveLessonV1RequestValidationError) ErrorName() string {
	return "RemoveLessonV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveLessonV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveLessonV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveLessonV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveLessonV1RequestValidationError{}

// Validate checks the field values on RemoveLessonV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveLessonV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Found

	return nil
}

// RemoveLessonV1ResponseValidationError is the validation error returned by
// RemoveLessonV1Response.Validate if the designated constraints aren't met.
type RemoveLessonV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveLessonV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveLessonV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveLessonV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveLessonV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveLessonV1ResponseValidationError) ErrorName() string {
	return "RemoveLessonV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveLessonV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveLessonV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveLessonV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveLessonV1ResponseValidationError{}
