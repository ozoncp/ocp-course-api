// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_course_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpCourseApiClient is the client API for OcpCourseApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpCourseApiClient interface {
	ListCoursesV1(ctx context.Context, in *ListCoursesV1Request, opts ...grpc.CallOption) (*ListCoursesV1Response, error)
	DescribeCourseV1(ctx context.Context, in *DescribeCourseV1Request, opts ...grpc.CallOption) (*DescribeCourseV1Response, error)
	CreateCourseV1(ctx context.Context, in *CreateCourseV1Request, opts ...grpc.CallOption) (*CreateCourseV1Response, error)
	RemoveCourseV1(ctx context.Context, in *RemoveCourseV1Request, opts ...grpc.CallOption) (*RemoveCourseV1Response, error)
	MultiCreateCourseV1(ctx context.Context, in *MultiCreateCourseV1Request, opts ...grpc.CallOption) (*MultiCreateCourseV1Response, error)
}

type ocpCourseApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpCourseApiClient(cc grpc.ClientConnInterface) OcpCourseApiClient {
	return &ocpCourseApiClient{cc}
}

func (c *ocpCourseApiClient) ListCoursesV1(ctx context.Context, in *ListCoursesV1Request, opts ...grpc.CallOption) (*ListCoursesV1Response, error) {
	out := new(ListCoursesV1Response)
	err := c.cc.Invoke(ctx, "/ocp.course.api.OcpCourseApi/ListCoursesV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpCourseApiClient) DescribeCourseV1(ctx context.Context, in *DescribeCourseV1Request, opts ...grpc.CallOption) (*DescribeCourseV1Response, error) {
	out := new(DescribeCourseV1Response)
	err := c.cc.Invoke(ctx, "/ocp.course.api.OcpCourseApi/DescribeCourseV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpCourseApiClient) CreateCourseV1(ctx context.Context, in *CreateCourseV1Request, opts ...grpc.CallOption) (*CreateCourseV1Response, error) {
	out := new(CreateCourseV1Response)
	err := c.cc.Invoke(ctx, "/ocp.course.api.OcpCourseApi/CreateCourseV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpCourseApiClient) RemoveCourseV1(ctx context.Context, in *RemoveCourseV1Request, opts ...grpc.CallOption) (*RemoveCourseV1Response, error) {
	out := new(RemoveCourseV1Response)
	err := c.cc.Invoke(ctx, "/ocp.course.api.OcpCourseApi/RemoveCourseV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpCourseApiClient) MultiCreateCourseV1(ctx context.Context, in *MultiCreateCourseV1Request, opts ...grpc.CallOption) (*MultiCreateCourseV1Response, error) {
	out := new(MultiCreateCourseV1Response)
	err := c.cc.Invoke(ctx, "/ocp.course.api.OcpCourseApi/MultiCreateCourseV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpCourseApiServer is the server API for OcpCourseApi service.
// All implementations must embed UnimplementedOcpCourseApiServer
// for forward compatibility
type OcpCourseApiServer interface {
	ListCoursesV1(context.Context, *ListCoursesV1Request) (*ListCoursesV1Response, error)
	DescribeCourseV1(context.Context, *DescribeCourseV1Request) (*DescribeCourseV1Response, error)
	CreateCourseV1(context.Context, *CreateCourseV1Request) (*CreateCourseV1Response, error)
	RemoveCourseV1(context.Context, *RemoveCourseV1Request) (*RemoveCourseV1Response, error)
	MultiCreateCourseV1(context.Context, *MultiCreateCourseV1Request) (*MultiCreateCourseV1Response, error)
	mustEmbedUnimplementedOcpCourseApiServer()
}

// UnimplementedOcpCourseApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpCourseApiServer struct {
}

func (UnimplementedOcpCourseApiServer) ListCoursesV1(context.Context, *ListCoursesV1Request) (*ListCoursesV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCoursesV1 not implemented")
}
func (UnimplementedOcpCourseApiServer) DescribeCourseV1(context.Context, *DescribeCourseV1Request) (*DescribeCourseV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCourseV1 not implemented")
}
func (UnimplementedOcpCourseApiServer) CreateCourseV1(context.Context, *CreateCourseV1Request) (*CreateCourseV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourseV1 not implemented")
}
func (UnimplementedOcpCourseApiServer) RemoveCourseV1(context.Context, *RemoveCourseV1Request) (*RemoveCourseV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCourseV1 not implemented")
}
func (UnimplementedOcpCourseApiServer) MultiCreateCourseV1(context.Context, *MultiCreateCourseV1Request) (*MultiCreateCourseV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiCreateCourseV1 not implemented")
}
func (UnimplementedOcpCourseApiServer) mustEmbedUnimplementedOcpCourseApiServer() {}

// UnsafeOcpCourseApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpCourseApiServer will
// result in compilation errors.
type UnsafeOcpCourseApiServer interface {
	mustEmbedUnimplementedOcpCourseApiServer()
}

func RegisterOcpCourseApiServer(s grpc.ServiceRegistrar, srv OcpCourseApiServer) {
	s.RegisterService(&OcpCourseApi_ServiceDesc, srv)
}

func _OcpCourseApi_ListCoursesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCoursesV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpCourseApiServer).ListCoursesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.course.api.OcpCourseApi/ListCoursesV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpCourseApiServer).ListCoursesV1(ctx, req.(*ListCoursesV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpCourseApi_DescribeCourseV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCourseV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpCourseApiServer).DescribeCourseV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.course.api.OcpCourseApi/DescribeCourseV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpCourseApiServer).DescribeCourseV1(ctx, req.(*DescribeCourseV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpCourseApi_CreateCourseV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourseV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpCourseApiServer).CreateCourseV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.course.api.OcpCourseApi/CreateCourseV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpCourseApiServer).CreateCourseV1(ctx, req.(*CreateCourseV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpCourseApi_RemoveCourseV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCourseV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpCourseApiServer).RemoveCourseV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.course.api.OcpCourseApi/RemoveCourseV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpCourseApiServer).RemoveCourseV1(ctx, req.(*RemoveCourseV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpCourseApi_MultiCreateCourseV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCreateCourseV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpCourseApiServer).MultiCreateCourseV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.course.api.OcpCourseApi/MultiCreateCourseV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpCourseApiServer).MultiCreateCourseV1(ctx, req.(*MultiCreateCourseV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpCourseApi_ServiceDesc is the grpc.ServiceDesc for OcpCourseApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpCourseApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.course.api.OcpCourseApi",
	HandlerType: (*OcpCourseApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCoursesV1",
			Handler:    _OcpCourseApi_ListCoursesV1_Handler,
		},
		{
			MethodName: "DescribeCourseV1",
			Handler:    _OcpCourseApi_DescribeCourseV1_Handler,
		},
		{
			MethodName: "CreateCourseV1",
			Handler:    _OcpCourseApi_CreateCourseV1_Handler,
		},
		{
			MethodName: "RemoveCourseV1",
			Handler:    _OcpCourseApi_RemoveCourseV1_Handler,
		},
		{
			MethodName: "MultiCreateCourseV1",
			Handler:    _OcpCourseApi_MultiCreateCourseV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "course_service.proto",
}
