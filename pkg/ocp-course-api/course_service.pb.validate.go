// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: course_service.proto

package ocp_course_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Course with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Course) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return CourseValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	if m.GetClassroomId() <= 0 {
		return CourseValidationError{
			field:  "ClassroomId",
			reason: "value must be greater than 0",
		}
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return CourseValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetStream()) < 1 {
		return CourseValidationError{
			field:  "Stream",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// CourseValidationError is the validation error returned by Course.Validate if
// the designated constraints aren't met.
type CourseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseValidationError) ErrorName() string { return "CourseValidationError" }

// Error satisfies the builtin error interface
func (e CourseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseValidationError{}

// Validate checks the field values on ListCoursesV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCoursesV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetLimit(); val <= 0 || val > 1000 {
		return ListCoursesV1RequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 1000]",
		}
	}

	// no validation rules for Offset

	return nil
}

// ListCoursesV1RequestValidationError is the validation error returned by
// ListCoursesV1Request.Validate if the designated constraints aren't met.
type ListCoursesV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCoursesV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCoursesV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCoursesV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCoursesV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCoursesV1RequestValidationError) ErrorName() string {
	return "ListCoursesV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCoursesV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCoursesV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCoursesV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCoursesV1RequestValidationError{}

// Validate checks the field values on ListCoursesV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCoursesV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetCourses() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCoursesV1ResponseValidationError{
					field:  fmt.Sprintf("Courses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCoursesV1ResponseValidationError is the validation error returned by
// ListCoursesV1Response.Validate if the designated constraints aren't met.
type ListCoursesV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCoursesV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCoursesV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCoursesV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCoursesV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCoursesV1ResponseValidationError) ErrorName() string {
	return "ListCoursesV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCoursesV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCoursesV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCoursesV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCoursesV1ResponseValidationError{}

// Validate checks the field values on DescribeCourseV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeCourseV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetCourseId() <= 0 {
		return DescribeCourseV1RequestValidationError{
			field:  "CourseId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeCourseV1RequestValidationError is the validation error returned by
// DescribeCourseV1Request.Validate if the designated constraints aren't met.
type DescribeCourseV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCourseV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCourseV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCourseV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCourseV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCourseV1RequestValidationError) ErrorName() string {
	return "DescribeCourseV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCourseV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCourseV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCourseV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCourseV1RequestValidationError{}

// Validate checks the field values on DescribeCourseV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeCourseV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCourse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeCourseV1ResponseValidationError{
				field:  "Course",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeCourseV1ResponseValidationError is the validation error returned by
// DescribeCourseV1Response.Validate if the designated constraints aren't met.
type DescribeCourseV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCourseV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCourseV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCourseV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCourseV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCourseV1ResponseValidationError) ErrorName() string {
	return "DescribeCourseV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCourseV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCourseV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCourseV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCourseV1ResponseValidationError{}

// Validate checks the field values on CreateCourseV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCourseV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetCourse() == nil {
		return CreateCourseV1RequestValidationError{
			field:  "Course",
			reason: "value is required",
		}
	}

	if a := m.GetCourse(); a != nil {

	}

	return nil
}

// CreateCourseV1RequestValidationError is the validation error returned by
// CreateCourseV1Request.Validate if the designated constraints aren't met.
type CreateCourseV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCourseV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCourseV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCourseV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCourseV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCourseV1RequestValidationError) ErrorName() string {
	return "CreateCourseV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCourseV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCourseV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCourseV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCourseV1RequestValidationError{}

// Validate checks the field values on CreateCourseV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCourseV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetCourseId() <= 0 {
		return CreateCourseV1ResponseValidationError{
			field:  "CourseId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// CreateCourseV1ResponseValidationError is the validation error returned by
// CreateCourseV1Response.Validate if the designated constraints aren't met.
type CreateCourseV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCourseV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCourseV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCourseV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCourseV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCourseV1ResponseValidationError) ErrorName() string {
	return "CreateCourseV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCourseV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCourseV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCourseV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCourseV1ResponseValidationError{}

// Validate checks the field values on RemoveCourseV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveCourseV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetCourseId() <= 0 {
		return RemoveCourseV1RequestValidationError{
			field:  "CourseId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveCourseV1RequestValidationError is the validation error returned by
// RemoveCourseV1Request.Validate if the designated constraints aren't met.
type RemoveCourseV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCourseV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCourseV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCourseV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCourseV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCourseV1RequestValidationError) ErrorName() string {
	return "RemoveCourseV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCourseV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCourseV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCourseV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCourseV1RequestValidationError{}

// Validate checks the field values on RemoveCourseV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveCourseV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Found

	return nil
}

// RemoveCourseV1ResponseValidationError is the validation error returned by
// RemoveCourseV1Response.Validate if the designated constraints aren't met.
type RemoveCourseV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCourseV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCourseV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCourseV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCourseV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCourseV1ResponseValidationError) ErrorName() string {
	return "RemoveCourseV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCourseV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCourseV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCourseV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCourseV1ResponseValidationError{}

// Validate checks the field values on MultiCreateCourseV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateCourseV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetCourses()) < 1 {
		return MultiCreateCourseV1RequestValidationError{
			field:  "Courses",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetCourses() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateCourseV1RequestValidationError{
					field:  fmt.Sprintf("Courses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreateCourseV1RequestValidationError is the validation error returned
// by MultiCreateCourseV1Request.Validate if the designated constraints aren't met.
type MultiCreateCourseV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateCourseV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateCourseV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateCourseV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateCourseV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateCourseV1RequestValidationError) ErrorName() string {
	return "MultiCreateCourseV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateCourseV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateCourseV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateCourseV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateCourseV1RequestValidationError{}

// Validate checks the field values on MultiCreateCourseV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateCourseV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetNotSaved() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateCourseV1ResponseValidationError{
					field:  fmt.Sprintf("NotSaved[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Error

	return nil
}

// MultiCreateCourseV1ResponseValidationError is the validation error returned
// by MultiCreateCourseV1Response.Validate if the designated constraints
// aren't met.
type MultiCreateCourseV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateCourseV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateCourseV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateCourseV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateCourseV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateCourseV1ResponseValidationError) ErrorName() string {
	return "MultiCreateCourseV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateCourseV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateCourseV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateCourseV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateCourseV1ResponseValidationError{}
