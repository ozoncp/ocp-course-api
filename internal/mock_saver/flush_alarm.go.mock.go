// Code generated by MockGen. DO NOT EDIT.
// Source: internal/saver/flush_alarm.go

// Package mock_saver is a generated GoMock package.
package mock_saver

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFlushAlarm is a mock of FlushAlarm interface.
type MockFlushAlarm struct {
	ctrl     *gomock.Controller
	recorder *MockFlushAlarmMockRecorder
}

// MockFlushAlarmMockRecorder is the mock recorder for MockFlushAlarm.
type MockFlushAlarmMockRecorder struct {
	mock *MockFlushAlarm
}

// NewMockFlushAlarm creates a new mock instance.
func NewMockFlushAlarm(ctrl *gomock.Controller) *MockFlushAlarm {
	mock := &MockFlushAlarm{ctrl: ctrl}
	mock.recorder = &MockFlushAlarmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlushAlarm) EXPECT() *MockFlushAlarmMockRecorder {
	return m.recorder
}

// C mocks base method.
func (m *MockFlushAlarm) C() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "C")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// C indicates an expected call of C.
func (mr *MockFlushAlarmMockRecorder) C() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "C", reflect.TypeOf((*MockFlushAlarm)(nil).C))
}

// Close mocks base method.
func (m *MockFlushAlarm) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockFlushAlarmMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFlushAlarm)(nil).Close))
}
