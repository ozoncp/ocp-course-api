// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package maps

import (
	"fmt"

	"github.com/ozoncp/ocp-course-api/api/model"
)

func SwapKeyAndValueIntString(xs map[int]string) map[string]int {
	res := make(map[string]int, len(xs))
	if xs == nil {
		return res
	}
	for k, v := range xs {
		if pk, contains := res[v]; contains {
			panic(
				fmt.Sprintf("The '%v' is not unique. Keys '%v' and '%v' have it",
					v, k, pk))
		}
		res[v] = k
	}
	return res
}

func SwapKeyAndValueIntModelCourse(xs map[int]model.Course) map[model.Course]int {
	res := make(map[model.Course]int, len(xs))
	if xs == nil {
		return res
	}
	for k, v := range xs {
		if pk, contains := res[v]; contains {
			panic(
				fmt.Sprintf("The '%v' is not unique. Keys '%v' and '%v' have it",
					v, k, pk))
		}
		res[v] = k
	}
	return res
}

func SwapKeyAndValueIntModelLesson(xs map[int]model.Lesson) map[model.Lesson]int {
	res := make(map[model.Lesson]int, len(xs))
	if xs == nil {
		return res
	}
	for k, v := range xs {
		if pk, contains := res[v]; contains {
			panic(
				fmt.Sprintf("The '%v' is not unique. Keys '%v' and '%v' have it",
					v, k, pk))
		}
		res[v] = k
	}
	return res
}

func SwapKeyAndValueUintString(xs map[uint]string) map[string]uint {
	res := make(map[string]uint, len(xs))
	if xs == nil {
		return res
	}
	for k, v := range xs {
		if pk, contains := res[v]; contains {
			panic(
				fmt.Sprintf("The '%v' is not unique. Keys '%v' and '%v' have it",
					v, k, pk))
		}
		res[v] = k
	}
	return res
}

func SwapKeyAndValueUintModelCourse(xs map[uint]model.Course) map[model.Course]uint {
	res := make(map[model.Course]uint, len(xs))
	if xs == nil {
		return res
	}
	for k, v := range xs {
		if pk, contains := res[v]; contains {
			panic(
				fmt.Sprintf("The '%v' is not unique. Keys '%v' and '%v' have it",
					v, k, pk))
		}
		res[v] = k
	}
	return res
}

func SwapKeyAndValueUintModelLesson(xs map[uint]model.Lesson) map[model.Lesson]uint {
	res := make(map[model.Lesson]uint, len(xs))
	if xs == nil {
		return res
	}
	for k, v := range xs {
		if pk, contains := res[v]; contains {
			panic(
				fmt.Sprintf("The '%v' is not unique. Keys '%v' and '%v' have it",
					v, k, pk))
		}
		res[v] = k
	}
	return res
}
