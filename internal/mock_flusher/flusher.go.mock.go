// Code generated by MockGen. DO NOT EDIT.
// Source: internal/flusher/flusher_generic.go

// Package mock_flusher is a generated GoMock package.
package mock_flusher

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	flusher "github.com/ozoncp/ocp-course-api/internal/flusher"
)

// MockFlusherTValue is a mock of FlusherTValue interface.
type MockFlusherTValue struct {
	ctrl     *gomock.Controller
	recorder *MockFlusherTValueMockRecorder
}

// MockFlusherTValueMockRecorder is the mock recorder for MockFlusherTValue.
type MockFlusherTValueMockRecorder struct {
	mock *MockFlusherTValue
}

// NewMockFlusherTValue creates a new mock instance.
func NewMockFlusherTValue(ctrl *gomock.Controller) *MockFlusherTValue {
	mock := &MockFlusherTValue{ctrl: ctrl}
	mock.recorder = &MockFlusherTValueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlusherTValue) EXPECT() *MockFlusherTValueMockRecorder {
	return m.recorder
}

// FlushTValue mocks base method.
func (m *MockFlusherTValue) FlushTValue(vs []flusher.TValue) []flusher.TValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushTValue", vs)
	ret0, _ := ret[0].([]flusher.TValue)
	return ret0
}

// FlushTValue indicates an expected call of FlushTValue.
func (mr *MockFlusherTValueMockRecorder) FlushTValue(vs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushTValue", reflect.TypeOf((*MockFlusherTValue)(nil).FlushTValue), vs)
}

// MockrepoTValue is a mock of repoTValue interface.
type MockrepoTValue struct {
	ctrl     *gomock.Controller
	recorder *MockrepoTValueMockRecorder
}

// MockrepoTValueMockRecorder is the mock recorder for MockrepoTValue.
type MockrepoTValueMockRecorder struct {
	mock *MockrepoTValue
}

// NewMockrepoTValue creates a new mock instance.
func NewMockrepoTValue(ctrl *gomock.Controller) *MockrepoTValue {
	mock := &MockrepoTValue{ctrl: ctrl}
	mock.recorder = &MockrepoTValueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrepoTValue) EXPECT() *MockrepoTValueMockRecorder {
	return m.recorder
}

// AddTValues mocks base method.
func (m *MockrepoTValue) AddTValues(vs []flusher.TValue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTValues", vs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTValues indicates an expected call of AddTValues.
func (mr *MockrepoTValueMockRecorder) AddTValues(vs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTValues", reflect.TypeOf((*MockrepoTValue)(nil).AddTValues), vs)
}
